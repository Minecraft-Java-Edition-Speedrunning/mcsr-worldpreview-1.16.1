
plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.mod_id
version = "$mod_version+$minecraft_version"
group = project.maven_group

def getVersionMetadata() {
	// CI builds version numbers
	def build_id = System.getenv("RELEASE_NUMBER")
	if (build_id != null) {
		return build_id + ".0.0"
	}

	// Development builds
	if (grgit == null) {
		return "dev"
	}

	// Named development builds
	def id = grgit.head().abbreviatedId
	if (!grgit.status().clean) {
		id += "-dirty"
	}

	return "rev.${id}"
}

loom {
	accessWidenerPath = file("src/main/resources/worldpreview.accesswidener")
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://jitpack.io" }
}

configurations {
	modIncludeImplementation

	include.extendsFrom modIncludeImplementation
	modImplementation.extendsFrom modIncludeImplementation
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	implementation "dev.tildejustin.state-output:state-output-common:v1.1.4"


	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "mod_id", project.mod_id
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "mod_id": project.mod_id, "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	def targetVersion = 8
	it.options.release = targetVersion
}

java {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}


publishing {
	publications.create("mavenJava", MavenPublication) {
		from components.java
	}
	repositories {}
}
